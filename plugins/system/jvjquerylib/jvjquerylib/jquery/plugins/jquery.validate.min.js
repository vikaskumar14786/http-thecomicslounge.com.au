/**
# mod_jvslidepro - JV Slide Pro
# @versions: 1.5.x,1.6.x,1.7.x,2.5.x
# ------------------------------------------------------------------------
# author    Open Source Code Solutions Co
# copyright Copyright (C) 2011 joomlavi.com. All Rights Reserved.
# @license - http://www.gnu.org/licenseses/gpl-3.0.html GNU/GPL or later
# Websites: http://www.joomlavi.com
# Technical Support:  http://www.joomlavi.com/my-tickets.html
-------------------------------------------------------------------------*/


var Validate = (function ($) {
        var validate = function (selector, ops) {
            selector = $(selector);
            if (!selector.is('input')) return null;
            ops = $.extend({}, validate.options, ops);
            var 
                This = this,
                els = [],
                errors,
                isError = false,
                errorPanel = $(),
                body = $('body'),
                buildStatus = function () {
                    if (!errors.length) return $('<span>',{'class':'validate-success'}).append($('<span>', { 'class': 'ui-icon ui-icon-check' })).hide().fadeIn(500);
                    var  
                        div = $('<div>',{'class':'validate-errors ui-widget ui-state-default ui-corner-all'}).mousedown(function(e){
                            selector.focus();
                            return false;
                        }),
                        head = $('<div>',{'class':'ui-widget-header'}).append($('<span>').append(ops.errorDisplay.title))
                        ul = $('<ul>')
                    ;
                    $.each(errors, function (i, val) {
                        var 
                            errorOps = ops.validates[val],
                            errorText = errorOps.error
                        ;
                        errorText && ul.append($('<li>').append(ops.validates[val].error));
                    });
                    displayAt.addClass('errors')
                    return div.append(head,ul);
                },
                setErrors = function () {

                },
                setBackground = function () {
                    display.css({});
                },
                displayAt = ops.errorDisplay.of ? selector.parents(ops.errorDisplay.of).eq(0) : selector,
                validates = {
                    number: function (val, ops) {
                        var isNum = /^[0-9]*\.?[0-9]*$/.test(val.replace(/^ +/g, '').replace(/ +$/g, ''));
                        return isNum;
                    },
                    email: function (val, ops) {
                        return /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/.test(val);
                    },
                    reg: function (val, ops) {
                        return (new RegExp(ops.reg)).test(val);
                    },
                    datetime: function (val, ops) {
                        return true;
                    },
                    minLength: function (val, ops) {
                        return val === '' || val.length >= ops.count;
                    },
                    maxLength: function (val, ops) {
                        return val === '' || val.length <= ops.count;
                    },
                    has: function (val, ops) {
                        return true;
                    },
                    required: function (val, ops) {
                        ops.space || (val = val.replace(/^ */, '').replace(/ *$/, ''));
                        return !(val == '');
                    }
                },
                check = function () {
                    errors = [];
                    var val = selector.val()
                    $.each(ops.validates, function (i, ops) {
                        validates[i](val, ops) || errors.push(i);
                    });
                    errors.length === 0 || selector.trigger('errors',[errors]);
                    selector.trigger('validate',[errors]);
                    return errors.length === 0;
                }
            ;
            displayAt.length || (displayAt = selector);
            selector.focusin(function () {
                $(this).select();
                displayAt.removeClass('errors');
                This.hideStatus();
            });
            $.each(ops.validateOn, function (i, val) {
                selector.bind(val, function () {
                    This.validate();
                    This.showStatus();
                });
            });
            $.extend(this, {
                validate: function () {
                    return check();
                },
                showStatus: function () {
                    errorPanel.remove();
                    errorPanel = buildStatus();
                    $(document).one('mousedown',function(){
                        This.hideStatus();
                    });
                    body.append(errorPanel);
                    errorPanel.css({
                        'position': 'absolute',
                        'opacity': 0
                    }).position({
                        of: displayAt,
                        my: 'left center',
                        at: 'right center'
                    }).stop().animate({ opacity: 1 });
                },
                hideStatus: function () {
                    errorPanel.stop().fadeOut(500, function () {
                        $(this).remove();
                    });
                },
                add: function (name,op) {
                    if ($.type(name) === 'string') {
                        var obj = {};
                        obj[name] = op;
                        this.add(obj);
                        return this;
                    }
                    $.extend(ops.validates, name);
                    return this;
                }
            });
        }
        validate.options = {
            validateOn: ['focusout'],
            showStatus: true
        }
        

        var v = function () {
            var 
                validates = [],
                countErrors = 0,
                This = this
            ;
            $.extend(this, {
                add: function (selector, options) {
                    selector = $(selector);
                    if (selector.length === 0) return this;

                    if (selector.length > 1) {
                        selector.each(function () {
                            var vObj = new validate(this, options);
                            validates.push({
                                validate: vObj,
                                selector: this,
                                options: options
                            });
                        });
                        return this;
                    }
                    
                    return this;
                },
                remove: function (obj) {
                    switch ($.type(obj)) {
                        case 'int':
                            validates.splice(obj, 1);
                            break;
                        case 'string':
                            this.remove($(obj));
                            break;
                        case 'array':
                            var This = this;
                            $.each(validates, function (i) {
                                if (obj.is(this.selector)) This.remove(i);
                            });
                            break;
                    }
                    return this;
                },
                validate: function () {
                    countErrors = 0;
                    $.each(validates, function () {
                        this.validate.validate() || this.validate.showStatus() && countErrors ++ ;
                    });
                    return countErrors === 0;
                }
            });
        }
        v.Validate = validate;
        return v;
    })(jQuery);